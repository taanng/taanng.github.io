<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>列兵与阶层</title>
    <url>/emotion/8c030514.html</url>
    <content><![CDATA[
拿破仑说：“不想当元帅的士兵，不是好兵”。

不想当元帅的士兵，不是好兵。
好了，现在问题来了。你见过士兵当元帅的么？
一 )  列兵
假设你是一个热心上进的青年，一心想出人头地，向上爬。
别人训练八个小时，你就付出二倍，三倍的努力。
最终你成为蛙人之霸，成为整支队伍中最精锐，最出色的战士。
请问你的前途会怎样。
答案是，你会成为蛙人小队长，中队长，大队长。对应职位排长，连长，营长。
可是，你做到蛙人大队长之后，你的职业基本上也就到头了。
军区以陆军为主，以炮兵和机械化步兵为主。要产生师长，也只会在这二个兵种中产生。
你不可能以一个蛙人队长身份，去率领三个师的。
最优秀的列兵，并不一定可以当元帅。
二）列兵和阶层
传统的世界观，以为人生就是一个“打怪升级”的路线。譬如你最初的时候，经验值是50点。
升到1W点时，可以给你个科长干干。
生到10W点时，可以给你个处长干干。
升到100W点时，可以给你个局长干干。
所以大伙老老实实努力去工作上班当老黄牛，评“三八红旗手”争先进吧。
而事实上，我们这个真实世界的世界观，是如下图的：

这是一张完全不精确，纯粹示意的图表。但意思是明确的。
对于跑步，射击，负重投弹等技能。其实只对列兵有效。
对于高级将领，实话说你是完全不需要枪法的。你找张大侠，问他徒手格斗能力如何。肯定还不如一个20岁毛头小伙愣头兵。
这完全不是“官越大武功越强”的思路。
正相反，官越大，职位反映的是什么呢。
反映的是你管的事情不同。
对于列兵一等兵二等兵，你考核关心的指标，主要是“单兵作战能力”。
对于尉官，主要是“列队”和贯彻指令。
对于校官，主要是火力搭配，战术级的技巧。
对于将军，主要是队伍的服从，派系的哥哥尊称。
对于元帅，则无论如何和宫廷扯不开关系。
你单兵作战能力再好，枪法再好，你注定就当个连长。再也升不上去了。
因为升团营，主要看你的管理能力。
如果你不从专业性人才，转为管理型人才。则提干终身无望。
三）想当元帅的士兵
如果你是一个二等兵。刚从农村乡下被募兵加入军队，你心怀大志，把人生的目标定在了“元帅”上面。
那你要做到些什么呢。
首先，你要是一个优秀的列兵。你必须枪法非常非常好，你才能在“列兵”的竞争中脱颖而出，当上排连。
其次，你必须是一个优秀的连长。当进入战术展开，要迅速地占领一个山头阵地。你必须比其他人更快地判断地形高低，判断火力点位置。具有“战术”才能。这样你才能升营团。
第三次，到了团级。你必须表现出具备非常的“领导力”才能。身上王霸之气侧漏，让身边的桀骜不驯的军人们都服从你，奉你为大哥。大伙江湖义气~~水里来火里去。这样你才有资格升“将军”，做到师军级。
最后，到了师军级，你必须“讲政治”。你必须在文官政府中，找到一个常委做主人。而且主人官运亨通步步高升。同时你的治国理念，鹰派或者鸽派还要符合文官政府的本届当前需求。这样你才会被升到元帅。元帅最主要的工作，不是军事，而是“宫廷”。
可见，在不同的阶段，你需要不同的才能。
你不是打一份工，你是打四份工。
在每一个阶段，你都要脱胎换骨。从拼枪法切换到拼地形切换到拼酒量，完全不同的生态环境。
别人过一生，你是过四辈子。
当你还是排连的时候，你吹嘘自己很能带兵，比韩信还厉害。那是没有用的。
你首要的工作是枪法和40kg拉练。否则，仅仅“排连”阶段选拔，就把你给灭了。
题外话；
完全的纯粹的彻底的“从士兵到元帅”，历史上是非常少的。
但也有很多“士官生”，他们从陆军军事学校毕业。一毕业就是少尉副连，然后可以几乎无阻力地升到正营副团。
和大头兵相比，他们相当于少走了一段“班排连”的路。农民兵要修炼四辈子，士官生只要修炼三辈子就够了。
同样道理，还有更高一级的“Red二代”。他们可能一开始就是营团级，然后直升师军级。别人修炼四世，他们修炼二世，具备二种面目技能就够了。
因为真正拥有“四种力量”，枪法、管理、带队和政治，四条线都做得好的人非常非常少，几乎像怪胎一样少。毫无疑问，“Red2”具有巨大优势。
这就是魏晋士族门阀的原因。
四）模式
“人生其实是分模式的”。
“决定你上升的，不是你本职工作的勤奋程度。而是你的框架模式”。
一个枪法百发百中的神枪手，和一个枪法巨烂的陆军学校士官生，后者更容易升营长。
赚钱这种事，和当兵吃粮很类似。
赚钱分A6，A7，A8，A9，A10
当兵分连长，营长，团长，师长，军长。
你想赚A6怎么办。很容易，初中毕业就缀学。跟你妈到菜市场卖鱼，划鳝丝去。
你想赚A7怎么办，读到大学毕业，老老实实外企上班。赚工资做白领。
你想赚A8怎么办，……….
你想赚A9怎么办，…………
你想赚A10怎么办，□□□□□□□□□
五）转职
假设你是一个三四线城市，在菜场里卖鱼划鳝丝的小贩。例如湖北孝感，天门，随州等没听说过的地级市。
你辛辛苦苦，攒了60W元。然后你和母亲羡慕地说，“妈，我也要像隔壁二狗一样，有500~600W”。
隔壁家二狗，当年是你的初中同学。可区别是，你初二没毕业就跟着了父母在菜场里卖鱼。划鳝丝。
二狗含辛茹苦，坚持读完了北邮大学。目前在企鹅做码农。买了北京房子，拿几十万一年。
在人生最初的15岁~22岁岁月里，你的收入远远高于二狗。二狗还是负支出。
可是等二狗踏上工作岗位，渐渐收入反超。这二年更是远远把你抛在脑后。
你还想追上二狗，可以么。
答案是“没法做”。
无论你划鳝丝多么勤劳，哪怕你每天加班工作时间延长一倍。可是收入的差距是无法弥补的。
三四线城市菜场卖鱼，永远就只是A6档次。几乎没指望升阶。
如果你想像二狗一样收入。首先你得去读个大学，其次你得离开湖北，到北上深去打拼。最后还需要年龄岁月履历，总之是无法回头的。
这就是模式之残酷性。
模式的残酷之处在于，他不是一件事，而是一整套事。
“大学文凭+北京打拼+北京定居”，这几件事是环环相扣的。绝不是你解开一个锁扣就行。
我们经常会讲一个故事，一个“弯道超车”的故事。
一般而言，大学里的班长学霸，都不是混得最好的人。
毕业之后，那些“起薪”最高的人，通常也不是混得最好的人。
毕业三五年之后，第一次聚会，那些收入最高行业最火热的同学们，八成也属于炮灰。
真正的竞争，要到三十岁以后。三十岁后才会有第一批崛起着。
而整个长跑，可以一直维持到30~45岁左右。在整段岁月内，突然就有一个同学“弯道超车”，突然就有一个同学发了，突然就有一个同学当了大官。
最终全班40个人，谁是赢家谁是输家，毕业照片里是绝对看不出来的。
为什么会这样，关键还是一个“模式”的问题。
譬如上班最早的一二年，收入最高的明星，往往是进外企或者BAT，工薪高。而终其一生，他们的角色就是一个打工仔。
而到了三十岁之后，做生意的，创业的，炒房子的，那些有望成为A8的人，才会冒出来。
到了四十五岁以后，做实业的，混官场的，搞人脉的，那些A9的模式人才会冒出来。
模式决定了人的最终高度。别看人家前几年不发财，那是在做准备！
如果你一辈子只想A6，那你初中缀学去卖鱼划鳝丝。
如果你一辈子想要A7，那你大学毕业进外企或BAT做白领拿工资。
如果你一辈子想要A8，……..
如果你一辈子想要A9，……….
如果你一辈子想要A10，那么□□□□□□□
当你从一个模式切换到另一阶模式时，你要注意；
1）虽然收入翻10倍，可劳动量并不增加10倍
2）辅助资源增加约1.5倍
3）复杂度增加1.5倍
你要是以为，收入翻10倍，劳动量翻10倍。靠增加人手，或者多开分店来完成。那就大错特错了!
如果你人手增10倍，这正说明你做错了，而且一定会破产。
收入增加10倍，关键是靠“升阶”来完成。
同时，各位对“升阶”也要有足够的准备和了解。
升阶之后，辅助资源的需求会增多，业务的复杂度会增加。尽管不是10倍增加。
你在湖北孝感菜场卖鱼划鳝丝，那你只需要一片刀片就行了。
而如果你做Python码农，你就需要大学文凭。而且你只有投奔北上深，那里才有互联网公司。
如果你想像现在那些“A10玩家”，一亿一亿地赚钱，十亿百亿的身家。
则他们主要依靠资本市场。
你需要做实体，或者做科技股，VC，ABCD轮融资，O2O，买流量、IPO上市………
]]></content>
      <categories>
        <category>感悟</category>
      </categories>
      <tags>
        <tag>成长</tag>
      </tags>
  </entry>
  <entry>
    <title>卑劣的街头电影观影感</title>
    <url>/emotion/9493ce1e.html</url>
    <content><![CDATA[卑劣的街头电影观影感看完这部影片后，被故事的结局深深的震撼。人究竟要以何种心态去处世？相信真情，最后被真情出卖，还是一直像会长一样做一个心机深沉、狠毒的人。电影的故事情节从逻辑上讲完全有可能再现实中发生，经过思考总结出下面2点人生建议。
做一个学会找钱的人会长一个老头，从体能上讲任何一个年轻人都能干死他，但是，相反，无论后生怎么争斗，他总是作为一个被巴结的对象，有着非常大的权利。这是为什么呢？我认为它的核心能力在于会找钱。纯粹的暴力不能带来财富，而怎么利用暴力去谋财是会长十分擅长的。这点让他利于不败之地。会长的手下争斗的目的在于成为最接近顶层领导的人，财富的分配越是靠近顶层获得越多，越是下面的人分得的财富可能连基本生活都不能保证。在这个游戏中，只会使用暴力的人只会永远争斗不休，时时被更年轻的人更有暴力的人挑战，时时处于危险之中。而会找钱的人在岁月的积累中，找钱的能力越来越高，伴随着财富的增长权利也越来越大。
不要考验人性炳斗非常看中作为同学的珉浩，在珉浩写黑帮题材电影稿无灵感四处碰壁的过程中，炳斗带他看黑帮打斗，告诉他黑帮内情，在拍电影过程中去现场指导，把他的事业当自己的事业，几乎把他当做兄弟对待。费了这么多的心力不说，这么做的后果是把自己的软弱展现给对方，时时有可能被背叛的风险。在不涉及利益的前提下，感情作为酒桌上的场面话，说得深情款款，但真到了最后考验人性的时候，这玩意被最先抛弃。这也就是炳斗惨死的主要原因。所以有时候不要考验人性，在最开始的时候不把自己的软肋放在对方那里保管才是最明智的做法，千万不要给对方一个拿自己性命做筹码，让他在在利益和道德之间做选择的机会。
]]></content>
      <categories>
        <category>感悟</category>
      </categories>
      <tags>
        <tag>电影</tag>
      </tags>
  </entry>
  <entry>
    <title>自我认知是什么以及如何培养</title>
    <url>/readings/43c8753.html</url>
    <content><![CDATA[自我认知有两种类型：内在的自我认知和外在的自我认知。
内在的自我认知表现在我们能够清楚地认识到自己的价值、激情、心愿、与外界和谐、反映能力，以及对他人的影响。内在的自我认知和更高的职位，更好的人际关系满足感，对个人和社会的控制力，以及幸福感是正相关的。
外在的自我认知指的是我们对别人对我们的看法的了解。别人对我们的价值、激情、心愿和各种反应能力以及对他人的影响的看法，我们是否有所认知。
内在和外在的自我认知构成了人完整的自我认知体系，缺一不可。如果人的内在自我认知非常弱，表明他对自己的价值、激情、心愿、优势、劣势等没有一个清晰的概念和判断，本身就会非常没有自信、无所适从，缺乏对自己是如何对他人和环境产生影响的评估。如果人具有高度的内在自我认知，却没有对外在评价的了解，就会完全陷入自我的主观世界中，有可能狂妄自大或者妄自菲薄。
怎样增强自我认知：首先，要从自己的人生经历中了解自己，回首过去的经历，哪些我们引以为豪，那么失败给我们重要的教训，自己最喜欢什么，厌恶什么，自己的人生目标是什么，事业目标是什么。其次，能够时常地自我回顾和总结。最后，还要学会从周围的亲人、朋友、同事、老板等吸收反馈，从他人的角度观察我们，他们可能看到我们自身没有意识到的优势和价值。对于正面反馈，我们进行加强，对于负面反馈，我们消化、分析、改正。

一个人拥有很强的自我认知力，那么他就会是一个自信的人。因为他深刻地了解自己的优势却不骄傲，也了解自己的缺点而不气馁，在对外的交往中，能有一份平常心。

]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
  </entry>
  <entry>
    <title>弱联系的强度：人脉、信息和创新</title>
    <url>/share/d5182155.html</url>
    <content><![CDATA[我们中国人非常喜欢谈人脉，有句现代谚语说“社会关系就是生产力”。拉关系，是很多人都做，但是又被某些有志青年所不屑的行为。可是不管你有多么不喜欢，在社会中做事情往往就是要依赖各种关系，求人未必可耻，孤独未必光荣。“关系”，是个正常的现象。而这个现象并不简单。也许在很多人眼中建立有价值人脉的关键是寻求一种比较亲密的关系，比如“一起同过窗一起扛过枪”，而社会学家们却恰恰不这么认为。
著名社会学家，现在是斯坦福大学教授Mark Granovetter，曾经在70年代专门研究了在波士顿近郊居住的专业人士、技术人员和经理人员是怎么找到工作的，并把研究结果作为他在哈佛大学的博士论文[1]。Granovetter找到282人，然后从中随机选取100人做面对面的访问。发现其中通过正式渠道申请，比如看广告投简历，拿到工作的不到一半。100人中有54人是通过个人关系找到的工作。这是一个相当可观的数字 — 当宅男们绞尽脑汁纠结于简历这么写好还是那么写好的时候，一半以上的工作已经让那些有关系的人先拿走了。
但这里面真正有意思的不是靠关系，而是靠什么关系。
穷人和富人的人脉结构
所谓多个朋友多条路，那么这条路到底更有可能是什么样的朋友给的呢？Granovetter发现，真正有用的关系不是亲朋好友这种经常见面的“强联系”，而是“弱联系”。在这些靠关系找到工作的人中只有16.7%经常能见到他们的这个“关系”，也就是每周至少见两次面。而55.6%的人用到的关系人仅仅偶然能见到，意为每周见不到两次，但每年至少能见一次。另有27.8%的帮忙者则一年也见不到一次。也就是说大多数你真正用到的关系，是那些并不经常见面的人。这些人未必是什么大人物，他们可能是已经不怎么联系的老同学或同事，甚至可能是你根本就不怎么认识的人。他们的共同特点是都不在你当前的社交圈里。
Granovetter对这个现象有一个解释。整天跟你混在一起的这帮人，很可能干的事跟你差不多，想法必然也很接近，如果你不知道有一个这样的工作机会，他们又怎么会知道？只有“弱联系”才有可能告诉你一些你不知道的事情。Granovetter把这个理论推广成一篇叫做《弱联系的强度》的论文，此文有可能是史上被引用次数最多的社会学论文，大概超过了两万次。这个研究的数据如此简陋，思想如此简单，然而其影响是深远的。现在“弱联系”这个概念已经进入励志领域，2010年有人出了本书，Superconnect: Harnessing the Power of Networks and the Strength of Weak Links[3]，其中大谈弱联系的用处。中文版说的更直接，叫《超级人脉》。
“弱联系”的真正意义是把不同社交圈子连接起来，从圈外给你提供有用的信息。根据弱联系理论，一个人在社会上获得机会的多少，与他的社交网络结构很有关系。如果你只跟亲朋好友交往，或者认识的人都是与自己背景类似的人，那么你大概就不如那些三教九流什么人都认识的人机会多。人脉的关键不在于你融入了哪个圈子，而在于你能接触多少圈外的人。这样来说，岂不是从一个人的社交网络结构，就能判断这个人的经济地位如何了么？
2010年，三个美国研究人员，Eagle，Macy和Claxton，做了一件有点惊人的事情来验证这个思想[4]。他们把2005年八月整个英国的几乎所有电话通讯记录拿过来，涵盖90%的手机和超过99%的固定电话。这些电话记录构成了可见的社交网络。研究者很难知道每个人的经济状况，但是英国政府有全国每个小区的经济状况数据 — 你可以查到哪里是富人区哪里是穷人区。这样他们把电话通讯记录跟其所在的三万多个小区居民的经济排名对比。结果非常明显，越是富裕的小区，其交往的“多样性”越明显。但是这个结果如果细看的话还有更多有意思的东西。社交网络多样性越强，经济排名就越高。
在统计上我们使用“相关系数”来表示两个东西之间的相关性，它的值在-1和1之间，越接近1，就表示这两个东西越容易一起变大和变小，负值则表示二者变化的方向相反。这个研究发现，小区的经济排名与其社交网络的“社会多样性”和“地区多样性”的相关系数分别是0.73和0.58。这意味着越是富人越容易跟不同阶层和不同地区的人联络，而且阶层多样性要比地区多样性更重要。正所谓“贫居闹市无人问，富在深山有远亲”。我们设想富人的联系人数也应该较高，因为他们认识的人比穷人多 — 这也是对的，但联系人数目和经济排名的相关系数只有0.44，并不太重要。最有意思的一点是，打电话时间长短，跟经济排名的相关系数是 -0.33，也就是说富人虽然爱跟各种人联系，但真正通话时间比穷人短。
这种数据分析的问题在于它只能告诉我们社交网络跟经济地位之间有这么个关系，但不能告诉我们到底是谁导致谁。是因为你富，才有不同的人愿意跟你接触呢，还是因为你愿意跟不同类型的人接触，才导致你富？Granovetter的理论还有另一个问题。事实上我们每个人认识的绝大多数人都是弱联系，强联系只是少数。如果让所有认识的人每人给我们一条工作信息，最后有用的这条信息当然有更大的可能性来自弱联系！Granovetter在他1973年的论文里承认了这个问题，但他也提出了一个解释：生活中强联系和弱联系跟我们交流的次数相差极大。我们跟强联系之间交流的信息，要远远多于弱联系。这种交流到底多多少，他没有办法量化计算，但是来自弱联系的信息总量可能并不比强联系多。那么这样看来还是弱联系重要，因为它传递的有价值信息比例更大。后来类似的质疑不断有人提出，但Granovetter的理论还是经受了考验。
所以弱联系理论的本质不是“人脉”，而是信息的传递。亲朋好友很愿意跟我们交流，但是话说多了就没有新意了。最有效率的交流，也许是跟不太熟悉的对象进行的。这个猜想怎么证实呢？
谁给你的信息重要？
现在有了网络，研究人员可以更好地分析我们是通过什么联系得到新知识的。比如你在各种社交媒体上经常阅读和转发来自网友的各种推荐，那么是亲密好友的推荐更有用，还是弱联系的推荐更有用呢？Facebook的数据团队2012年针对这个问题做了一项设计得非常巧妙的研究[5]。研究者有个简单办法判断你跟各个网友之间的联系强弱。比如说如果你们之间经常互相评论对方发的状态，那么你们就是强联系的关系，否则就是弱联系。
这项研究统计人们在Facebook上分享的那些网页链接 — 如果你分享这个链接，你大概认为这个链接是有用的。这种分享有两种可能性。一种是你的朋友（不管是强联系还是弱联系）先发了这个链接，你看到以后转发。另一种是你自己独自发现这个链接。我们可以想象，前一种方式发生的可能性肯定要比后一种大，社交网络的作用就是让网友向我们提供信息啊。Facebook的这个研究通过随机试验的办法来跟踪特定的一组网页地址，结果发现别人分享这个地址给我们，我们看到以后再转发的可能性（p_feed），比如我们自己看到这个地址直接分享的可能性（p_no feed），大五倍以上。这两种可能性的比值（p_feed&#x2F;p_no feed），也就是网友分享的放大效应。
我们的转发行为是相当亲疏有别的，我们更乐意转发“强联系”分享给我们的信息。统计发现如果强联系发给我们一条信息，我们转发它的概率大约是弱联系发过来信息的两倍左右。这个理所当然，强联系之间本来就有类似的兴趣。有人据此甚至担心，社交媒体是否加剧了“物以类聚人以群分”这个局面？我们会不会因为总跟志趣相投的人呆在一起而把社交圈变成一个个孤岛呢？
不用担心。我觉得这个研究最巧妙的一点是这样的：它不但比较了我们愿意转发强联系还是弱联系，还比较了两种不同联系的放大效应。强联系的放大效应是6，而弱联系的放大效应是9。也就是说同样一个网址，你看到一个弱联系分享给你你再转发的几率，是你自己发现这个网址再分享的几率的9倍。再说白了，就是强联系告诉你的有用信息，你自己本来也有可能发现；而弱联系告诉你的有用信息，他要没告诉你你恐怕就发现不了。这个性质和当年Granovetter说的何其相似。
上面两张图是用两种不同方法（按评论数和按发的消息数）计算联系的强度时，p_feed和p_no feed的对比；下面两张图则是p_feed&#x2F;p_no feed。
然后再考虑到人们接收到来自两种联系的信息总量，把它们用相应的分享几率加权平均之后，发现来自弱联系信息的影响力远远超过强联系。也就是说，虽然人们重视强联系，人们的大部分知识还是来自弱联系。
现在“弱联系”理论已经被推广到了任何新消息或者新想法，不管你是仅仅想学点东西，找工作，还是创业，你都应该避免成熟圈子中的“强联系”，而应该走出去追求“弱联系”。
别跟熟人合伙
已经有统计表明，从弱联系那里获得想法，乃至于与弱联系合伙创业，有利于提高一个公司的创新能力。社会学家Martin Ruef问卷调查了766个在美国西部某个大学（其实是斯坦福大学，尽管论文里并没有明确说明）获得MBA学位，然后又曾经至少尝试过自己创业的“企业家”，他想从中发现弱联系和创新的关系[6]。Ruef统计了这些MBA们所创办公司的人员构成和信息来源，并且使用各种办法评估这些公司的创新能力，比如考察是否推出了新产品或者新的销售手段，是否打入国际市场，有多少专利等等。
是从哪来的想法直接刺激你创业的？Ruef发现，这个创业想法来自与家人和朋友这些强联系讨论的，只占38%。而来自与客户和供货商这类商业伙伴这些弱联系讨论的，则高达52%。另有人则是受媒体或专家启发。可见好想法来自弱联系这个定律从创业之初就管用。
看来经常出去参加饭局的确比在家呆着强。但是那些连饭局都不参加的创业者有可能更强。现在我们再考虑公司开起来以后的信息来源。如果你在创业过程中的信息网络主要由弱联系构成，你的创新能力是那些指望强联系的公司的1.36倍。而如果你干脆不靠熟人，直接从媒体和不认识的专家那里获得信息，你的创新能力则是强联系公司的1.5倍。而从社交网络来看，跟前面英国数据的结果一致，你的社交网络越多样化，你的创新能力就越强。那些拥有极度多样化社交网络的企业家，他们既有强联系也有弱联系，还接受从未打过交道的人的意见，其创新能力是那些只有单一社交网络的人的三倍。
虽是如此，大部分创业团队仍然由家人和朋友构成。强联系团队和弱联系团队的数目对比差不多是五比三。所以我们看到中国人搞家族企业，或者好友合伙创业，也只能理解，就算是斯坦福MBA又能怎样。而Ruef使用一个创新评估模型发现，弱联系团队的创新能力差不多是强联系团队的1.18倍。更进一步，如果这个团队成员在此之前从来不认识，那么这个团队的创新能力还可以更高一点。
但是人们很难拒绝强联系的诱惑。比如在我们心目中风险投资这个行业的人应该是比较理性的人，或者至少应该是比较冷酷无情的人，对吧？但是就算是这帮人也会犯追求强联系的错误，而这个错误使他们付出了相当显著的代价。
这是一项非常新的研究。2012年六月，哈佛大学商学院的Gompers, Mukharlyamov, 和Yuhai Xuan 发了一篇名为《友谊的代价》的论文[7]。这篇论文考察了3510个风险投资者，以及他们在1975到2003年间11895个投资项目。有些人选择与自己能力相当的人合作，比如大家都是名校毕业；但更多的人选择与自己的“熟人”合作，比如是曾经的同学、同事，或者仅仅因为二人是一个种族。这个研究发现，按能力搭档可以增加投资的成功率，而找熟人搭档，则会极其显著地减少投资成功的可能性。
这些人愿意跟什么样的人搭档呢？能力是一个参考因素：如果两个人都是从名校毕业，他们发生合作的可能性比一般人高8.5%。但更大的参考因素是关系：如果两个人是同一个大学的校友，他们合作的可能性会增加20.5%。而关系亲还不如种族亲！如果这两个人是同一个种族的，他们合作的可能性会增加22.8%。
那么不同类型的搭档关系，对投资成败有什么影响呢？两个风险投资者中如果有一个是名校毕业的，其投资的这个公司将来能上市的可能性会提高9%。如果他的搭档也是名校毕业，则提高11%。所以按能力选搭档，哪怕你把能力简单地用学历代表，都的确能增加成功概率。可是如果选一个以前跟你在同一个公司干过的同事搭档的话，会让风投成功的可能性降低18%。如果选校友，降低22%。如果选“族人”，降低25%。
看来风险投资的最佳合作伙伴，应该是一个从来没跟你进过同一个大学，从来没跟你在同一个公司工作过，而且跟你不是一个种族的高学历者。
所有人都喜欢强联系，哪怕是风险投资者和斯坦福MBA也是如此。我们愿意跟他们在一起混，我们愿意给他们打电话，我们愿意转发他们的微博。但是熟归熟，工作归工作。当我们考虑找人创业，找人合作，哪怕是找人了解什么信息的时候，“弱联系”才是最佳选择。现在社会学已经有了足够多的证据说明，对工作来说，同乡会和校友录不是扩展人脉的好地方。
]]></content>
      <categories>
        <category>网络分享</category>
      </categories>
  </entry>
  <entry>
    <title>Gitbook使用教程</title>
    <url>/skill/c66ca38f.html</url>
    <content><![CDATA[GitBook 准备工作安装 Node.jsGitBook 是一个基于 Node.js 的命令行工具，下载安装 Node.js，安装完成之后，你可以使用下面的命令来检验是否安装成功。
$ node -vv7.7.1

安装 GitBook输入下面的命令来安装 GitBook。
$ npm install gitbook-cli -g

安装完成之后，你可以使用下面的命令来检验是否安装成功。
$ gitbook -VCLI version: 2.3.2GitBook version: 3.2.3

更多详情请参照 GitBook 安装文档 来安装 GitBook。
安装 GitBook 编辑器去 GitBook 官网 下载 GitBook 编辑器；如果是 Mac 用户且安装过 brew cask 的话可以使用 brew cask install gitbook-editor 命令行来安装 GitBook 编辑器。
先睹为快GitBook 准备工作做好之后，我们进入一个你要写书的目录，输入如下命令。
$ gitbook initwarn: no summary file in this bookinfo: create README.mdinfo: create SUMMARY.mdinfo: initialization is finished

可以看到他会创建 README.md 和 SUMMARY.md 这两个文件，README.md 应该不陌生，就是说明文档，而 SUMMARY.md 其实就是书的章节目录，其默认内容如下所示：
# Summary* [Introduction](README.md)

接下来，我们输入 $ gitbook serve 命令，然后在浏览器地址栏中输入 http://localhost:4000 便可预览书籍。
效果如下所示：
运行该命令后会在书籍的文件夹中生成一个 _book 文件夹, 里面的内容即为生成的 html 文件，我们可以使用下面命令来生成网页而不开启服务器。
gitbook build

下面我们来详细介绍下 GitBook 目录结构及相关文件。
目录结构GitBook 基本的目录结构如下所示：
.├── book.json├── README.md├── SUMMARY.md├── chapter-1/|   ├── README.md|   └── something.md└── chapter-2/    ├── README.md    └── something.md

下面我们主要来讲讲 book.json 和 SUMMARY.md 文件。
book.json该文件主要用来存放配置信息，我先放出我的配置文件。
&#123;    &quot;title&quot;: &quot;Blankj&#x27;s Glory&quot;,    &quot;author&quot;: &quot;Blankj&quot;,    &quot;description&quot;: &quot;select * from learn&quot;,    &quot;language&quot;: &quot;zh-hans&quot;,    &quot;gitbook&quot;: &quot;3.2.3&quot;,    &quot;styles&quot;: &#123;        &quot;website&quot;: &quot;./styles/website.css&quot;    &#125;,    &quot;structure&quot;: &#123;        &quot;readme&quot;: &quot;README.md&quot;    &#125;,    &quot;links&quot;: &#123;        &quot;sidebar&quot;: &#123;            &quot;我的狗窝&quot;: &quot;https://blankj.com&quot;        &#125;    &#125;,    &quot;plugins&quot;: [        &quot;-sharing&quot;,        &quot;splitter&quot;,        &quot;expandable-chapters-small&quot;,        &quot;anchors&quot;,        &quot;github&quot;,        &quot;github-buttons&quot;,        &quot;donate&quot;,        &quot;sharing-plus&quot;,        &quot;anchor-navigation-ex&quot;,        &quot;favicon&quot;    ],    &quot;pluginsConfig&quot;: &#123;        &quot;github&quot;: &#123;            &quot;url&quot;: &quot;https://github.com/Blankj&quot;        &#125;,        &quot;github-buttons&quot;: &#123;            &quot;buttons&quot;: [&#123;                &quot;user&quot;: &quot;Blankj&quot;,                &quot;repo&quot;: &quot;glory&quot;,                &quot;type&quot;: &quot;star&quot;,                &quot;size&quot;: &quot;small&quot;,                &quot;count&quot;: true                &#125;            ]        &#125;,        &quot;donate&quot;: &#123;            &quot;alipay&quot;: &quot;./source/images/donate.png&quot;,            &quot;title&quot;: &quot;&quot;,            &quot;button&quot;: &quot;赞赏&quot;,            &quot;alipayText&quot;: &quot; &quot;        &#125;,        &quot;sharing&quot;: &#123;            &quot;douban&quot;: false,            &quot;facebook&quot;: false,            &quot;google&quot;: false,            &quot;hatenaBookmark&quot;: false,            &quot;instapaper&quot;: false,            &quot;line&quot;: false,            &quot;linkedin&quot;: false,            &quot;messenger&quot;: false,            &quot;pocket&quot;: false,            &quot;qq&quot;: false,            &quot;qzone&quot;: false,            &quot;stumbleupon&quot;: false,            &quot;twitter&quot;: false,            &quot;viber&quot;: false,            &quot;vk&quot;: false,            &quot;weibo&quot;: false,            &quot;whatsapp&quot;: false,            &quot;all&quot;: [                &quot;google&quot;, &quot;facebook&quot;, &quot;weibo&quot;, &quot;twitter&quot;,                &quot;qq&quot;, &quot;qzone&quot;, &quot;linkedin&quot;, &quot;pocket&quot;            ]        &#125;,        &quot;anchor-navigation-ex&quot;: &#123;            &quot;showLevel&quot;: false        &#125;,        &quot;favicon&quot;:&#123;            &quot;shortcut&quot;: &quot;./source/images/favicon.jpg&quot;,            &quot;bookmark&quot;: &quot;./source/images/favicon.jpg&quot;,            &quot;appleTouch&quot;: &quot;./source/images/apple-touch-icon.jpg&quot;,            &quot;appleTouchMore&quot;: &#123;                &quot;120x120&quot;: &quot;./source/images/apple-touch-icon.jpg&quot;,                &quot;180x180&quot;: &quot;./source/images/apple-touch-icon.jpg&quot;            &#125;        &#125;    &#125;&#125;

相信很多节点自己也能猜到是什么意思，我还是简单介绍下吧。
title本书标题
author本书作者
description本书描述
language本书语言，中文设置 “zh-hans” 即可
gitbook指定使用的 GitBook 版本
styles自定义页面样式
structure指定 Readme、Summary、Glossary 和 Languages 对应的文件名
links在左侧导航栏添加链接信息
plugins配置使用的插件
pluginsConfig配置插件的属性
SUMMARY.md这个文件主要决定 GitBook 的章节目录，它通过 Markdown 中的列表语法来表示文件的父子关系，下面是一个简单的示例：
# Summary* [Introduction](README.md)* [Part I](part1/README.md)    * [Writing is nice](part1/writing.md)    * [GitBook is nice](part1/gitbook.md)* [Part II](part2/README.md)    * [We love feedback](part2/feedback_please.md)    * [Better tools for authors](part2/better_tools.md)

这个配置对应的目录结构如下所示:
我们通过使用 标题 或者 水平分割线 将 GitBook 分为几个不同的部分，如下所示：
# Summary### Part I* [Introduction](README.md)* [Writing is nice](part1/writing.md)* [GitBook is nice](part1/gitbook.md)### Part II* [We love feedback](part2/feedback_please.md)* [Better tools for authors](part2/better_tools.md)---* [Last part without title](part3/title.md)

这个配置对应的目录结构如下所示:
插件GitBook 有 插件官网，默认带有 5 个插件，highlight、search、sharing、font-settings、livereload，如果要去除自带的插件， 可以在插件名称前面加 -，比如：
&quot;plugins&quot;: [    &quot;-search&quot;]

如果要配置使用的插件可以在 book.json 文件中加入即可，比如我们添加 plugin-github，我们在 book.json 中加入配置如下即可：
&#123;    &quot;plugins&quot;: [ &quot;github&quot; ],    &quot;pluginsConfig&quot;: &#123;        &quot;github&quot;: &#123;            &quot;url&quot;: &quot;https://github.com/your/repo&quot;        &#125;    &#125;&#125;

然后在终端输入 gitbook install ./ 即可。
]]></content>
      <categories>
        <category>技术</category>
      </categories>
  </entry>
  <entry>
    <title>Nginx+PHP搭建网站和文件服务器</title>
    <url>/skill/84a00f80.html</url>
    <content><![CDATA[本文记录搭建简单网站和文件服务器的过程，针对刚入门的小白，仅仅安装Nginx和PHP，不安装mysql
1. 安装Nginxsudo apt update &amp;&amp; sudo apt install nginx

1.1. 测试是否安装成功在浏览器输入你本机IP地址或者域名，会看到如下欢迎信息表示安装成功
欢迎信息在&#x2F;var&#x2F;www&#x2F;html中
2. 安装PHPsudo apt update &amp;&amp; sudo apt install php-fpm
如果安装了mysql，用以下命令
sudo apt update &amp;&amp; sudo apt install php-fpm php-mysql
2.1 查看PHP版本php --version
3. 配置Nginx和PHPNginxd的配置文件位于/etc/nginx/sites-available/default
3.1 在此文件中添加php支持,在index.html前添加index.php index index.php index.html index.htm index.nginx-debian.html; #
3.2 配置域名server_name YOUR_DOMAIN_OR_IP_HERE;
3.3 配置php与Nginx关联location ~ \.php$ &#123;          include snippets/fastcgi-php.conf;          #          # With php-fpm (or other unix sockets):          fastcgi_pass unix:/var/run/php/php7.2-fpm.sock;#此处和所安装的php版本号有关，根据实际填写          # With php-cgi (or other tcp sockets):          #fastcgi_pass 127.0.0.1:9000;&#125;
3.4 测试Nginx语法是否有误sudo nginx -t
如果看到如下信息，表示无误
nginx: the configuration file &#x2F;etc&#x2F;nginx&#x2F;nginx.conf syntax is oknginx: configuration file &#x2F;etc&#x2F;nginx&#x2F;nginx.conf test is successful
3.5 重载Nginxsudo service nginx reload
4. 测试PHP是否成功运行编辑info.phpsudo nano &#x2F;var&#x2F;www&#x2F;html&#x2F;info.php填入以下内容
&lt;?phpphpinfo();
然后在你的浏览器输入 http://your_domain_or_IP/info.php，如果出现以下界面表示PHP配置成功
5. 配置网站和文件服务器配置文件位于&#x2F;etc&#x2F;nginx&#x2F;sites-available&#x2F;default编辑完成后重启Nginx服务systemctl restart nginx.service以下是我的配置文件，请参考
# Default server configuration#网站配置信息server &#123;	listen 80 ;	root /var/www/site_path; #网站存放目录	# Add index.php to the list if you are using PHP	index index.php index.html index.htm index.nginx-debian.html; #添加index.php支持	server_name YOUR_DOMAIN_OR_IP_HERE; #域名或IP	location / &#123;		try_files $uri $uri/ =404;	&#125;	# pass PHP scripts to FastCGI server	#	location ~ \.php$ &#123;		include snippets/fastcgi-php.conf;			# With php-fpm (or other unix sockets):		fastcgi_pass unix:/var/run/php/php7.2-fpm.sock;		# With php-cgi (or other tcp sockets):		#fastcgi_pass 127.0.0.1:9000;	&#125;	# deny access to .htaccess files, if Apache&#x27;s document root	# concurs with nginx&#x27;s one	#	location ~ /\.ht &#123;		deny all;	&#125;&#125;#文件服务器配置信息server &#123;	listen 80 ;	charset utf-8; #设置UTF-8防止中文乱码	root /var/www/file_path; #文件存放目录	# Add index.php to the list if you are using PHP	index index.php index.html index.htm index.nginx-debian.html;	server_name YOUR_DOMAIN_OR_IP_HERE; #域名或者ip	location / &#123;		# First attempt to serve request as file, then		# as directory, then fall back to displaying a 404.		#try_files $uri $uri/ =404;		autoindex on; #索引		autoindex_exact_size off; #关闭文件确切大小，只显示大概大小(kb,mb,gb)		autoindex_localtime on; #显示文件时间		&#125;	# pass PHP scripts to FastCGI server	#	location ~ \.php$ &#123;		include snippets/fastcgi-php.conf;			# With php-fpm (or other unix sockets):		fastcgi_pass unix:/var/run/php/php7.2-fpm.sock;		# With php-cgi (or other tcp sockets):		#fastcgi_pass 127.0.0.1:9000;	&#125;	# deny access to .htaccess files, if Apache&#x27;s document root	# concurs with nginx&#x27;s one	#	location ~ /\.ht &#123;		deny all;	&#125;&#125;]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>nginx</tag>
        <tag>PHP</tag>
        <tag>搭建文件服务器</tag>
        <tag>搭建网站</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx网站配置TLS证书</title>
    <url>/skill/67e68704.html</url>
    <content><![CDATA[本文记录为已搭建的网站配置TLS证书，使自己的网站支持https访问。
条件准备：已安装Nginx的服务器一个
1. 申请证书证书的申请可以在阿里云搜索SSL证书，申请好之后可以看到如下界面，点击右边的下载获得证书文件，下载得到的文件有两个文件domainName.key和domainName.pem,申请好的证书下载界面如下
2. 上传证书到服务器创建证书目录存在申请的证书mkdir /etc/nginx/cert创建完成后将申请的证书文件保存在此目录下
3、配置NginxNginx的配置文件一般位于/etc/nginx/sites-available/default
常规的http访问是80或者8080端口，而https访问默认是443端口。
由于很多人习惯http访问，我们可根据需要进行强制http跳转到https，个人配置信息如下
server &#123;	listen 443 ssl;   #SSL协议访问端口号为443。此处如未添加ssl，可能会造成Nginx无法启动。	server_name www.example.com;  #将localhost修改为您证书绑定的域名，例如：www.example.com。		ssl_certificate /etc/nginx/cert/www.example.com.pem;   #将domain name.pem替换成您证书的文件名。	ssl_certificate_key /etc/nginx/cert/www.example.com.key;   #将domain name.key替换成您证书的密钥文件名。	ssl_session_timeout 5m;	ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;  #使用此加密套件。	ssl_protocols TLSv1.2;   #使用该协议进行配置。	ssl_prefer_server_ciphers on;   	root /var/www/www.example.com;	# Add index.php to the list if you are using PHP	index index.php index.html index.htm index.nginx-debian.html;	location / &#123;		# First attempt to serve request as file, then		# as directory, then fall back to displaying a 404.		try_files $uri $uri/ =404;	&#125;	# pass PHP scripts to FastCGI server	#	location ~ \.php$ &#123;		include snippets/fastcgi-php.conf;	#	#	# With php-fpm (or other unix sockets):		fastcgi_pass unix:/var/run/php/php7.2-fpm.sock;	#	# With php-cgi (or other tcp sockets):	#	fastcgi_pass 127.0.0.1:9000;	&#125;&#125;     #设置http强制跳转httpsserver &#123;	listen 80;	server_name www.example.com;   #将localhost修改为您证书绑定的域名，例如：www.example.com。	rewrite ^(.*)$ https://www.example.com$1 permanent;   #将所有http请求通过rewrite重定向到https。&#125;
4、测试与重启测试语法是否正确
nginx -t
如果出现以下信息表示配置成功
nginx: the configuration file /etc/nginx/nginx.conf syntax is oknginx: configuration file /etc/nginx/nginx.conf test is successful
重启
nginx -s reload
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>nginx</tag>
        <tag>TLS证书</tag>
        <tag>配置证书</tag>
      </tags>
  </entry>
  <entry>
    <title>github action定时编译语法</title>
    <url>/skill/c3b8471.html</url>
    <content><![CDATA[配置 GitHub Action ymlaction编译脚本yml示例
name: youBuildName#on表示触发入口，schedule表示触发条件为定时触发on:   push:  schedule:    - cron: 0 20 * * *  #表示utc时间 20点触发

cron有5个字段，各个字段表示含义如下
┌───────────── minute (0 - 59)│ ┌───────────── hour (0 - 23)│ │ ┌───────────── day of the month (1 - 31)│ │ │ ┌───────────── month (1 - 12 or JAN-DEC)│ │ │ │ ┌───────────── day of the week (0 - 6 or SUN-SAT)│ │ │ │ │                                   │ │ │ │ ││ │ │ │ │* * * * *
各个字段可取值如下



操作符
描述
例子



*
任何值
* * * * * 每天每分钟运行


,
分割的值
2,10 4,5 * * * 每天4点的2,10分和5点的2,10分运行


-
范围值
0 4-6 * * * 每天的4、5、6的0分运行


&#x2F;
步进值
20/15 * * * * 以20分开始，每间隔15分钟触发一次


]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>github action</tag>
        <tag>定时编译</tag>
        <tag>github定时编译</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Travis自动部署你的gitbook</title>
    <url>/skill/702f4840.html</url>
    <content><![CDATA[配置 GitHub Token利用 GitHub Token,Travis CI 才有权限访问你在 GitHub 上的仓库，所以不要轻易将 Token 泄露。
进入 https://github.com/settings/tokens，生成用于 Travis CI 的 Token，其中权限的勾选，酌情勾选，博主全部勾选。
配置 Travis CI同步账号在进入 https://travis-ci.org 进行配置前，你需要将你的项目推送到 GitHub 上，比如博主这里推送到 TravisCIStudy 的仓库，然后在 Travis CI 网站同步你的账号。
Travis CI 仓库设置同步完仓库后，在右侧列表找到仓库，打开按钮，并点击Settings进入仓库设置。
1. 仓库设置项说明进入后，可以看到总共有四部分设置区域：



设置名
解释说明



General
通用设置，关于是否构建分支等


Auto Cancellation
自动取消，关于是否自动取消构建分支等


Environment Variables
环境变量，填写 Token


Cron Jobs
定时任务，修改任务执行频率和条件


2. 环境变量填写前两部分设置，按照默认即可，Environment Variables中填写刚刚生成的 GitHub Token，下图所示。
注意：

由于 Travis CI 适用于公共仓库，并且 Travis CI 构建和部署的日志也是对外公开的，所以最好不要将Display value in build log按钮打开

3. 定制任务设置在定时任务中，可以选择任务执行的分支；间隔：每月、每周亦或是每天；选项中，可以选择是否总是执行，或是在 24 小时内只执行一次。选择完成后，按添加即可。
到这里 GitHub 和 Travis CI 仓库连接的相关参数配置完成，现在只要在项目的根目录添加.travis.yml文件后，推送到远程仓库后，Travis CI 服务检测到有该文件，便会自动执行任务。那么.travis.yml配置文件该怎么配置呢，请看下文所述。
编写. travis.yml 配置文件直接上配置文件说明
# 指定环境语言language: node_js# 指定sudo权限sudo: required# 指定node版本node_js: stable# 指定缓存模块，缓存可以加速编译cache:  directories:    - node_modules# 邮件通知，这里配置不管成功或是失败都通知notifications:  email:    recipients:      - taylortaurus0517@gmail.com      - yuanzheng0517@foxmail.com    on_success: always # default: change    on_failure: always # default: always# 构建的分支branches:  only:    - gitbook # 调整时区before_install:  - export TZ=&#x27;Asia/Shanghai&#x27;# 安装环境install:  - npm install -g gitbook-cli  - gitbook install# gitbook生成静态文件script:  - gitbook build# 生成文件后，进入静态文件目录，部署到指定仓库，需要填写用户名，邮件after_script:  - cp ./seo/* ./_book/  - cd ./_book  - git init  - git config user.name &quot;taylortaurus&quot;  - git config user.email &quot;taylortaurus0517@gmail.com&quot;  - git add .  - git commit -m &quot;Update GitBook By TravisCI With Build $TRAVIS_BUILD_NUMBER&quot;  - git push --force --quiet &quot;https://$&#123;GH_TOKEN&#125;@$&#123;GH_REF&#125;&quot; master:master  - git push --force --quiet &quot;https://taylortaurus:$&#123;CO_TOKEN&#125;@$&#123;CO_REF&#125;&quot; master:master# 环境变量env: global:   # Github Pages   - GH_REF: github.com/taylortaurus/TravisCIStudy   # Coding Pages   - CO_REF: git.coding.net/taylortaurus/TravisCIStudy.git

终至此，所有的配置均完成，现在只要将.travis.yml配置文件推送到远程仓库，静等结果。
]]></content>
      <categories>
        <category>技术</category>
      </categories>
  </entry>
  <entry>
    <title>使用jsDelivr CDN加速Github仓库的图片,作为博客的图床</title>
    <url>/skill/39680407.html</url>
    <content><![CDATA[
jsDelivr 是国外的一家优秀的公共 CDN 服务提供商，也是首个「打通中国大陆（网宿公司运营）与海外的免费 CDN 服务」1。jsDelivr 有一个十分好用的功能——它可以加速 Github 仓库的文件。我们可以借此搭建一个免费、全球访问速度超快的图床。
声明：静态文件主要是缓存在 jsDelivr 的 CDN 节点上，确保 GitHub 承受最小的负载，并且你还可以从 GitHub 仓库获得快速简便的静态文件托管。

jsDelivr is a public, open-source CDN (Content Delivery Network) developed by ProspectOne, focused on performance, reliability, and security. It is free to use for everyone, with no bandwidth limits2.
jsDelivr is the only public CDN with a valid ICP license issued by the Chinese government, and hundreds of locations directly in Mainland China1.

主要思路使用 PicGo3将图片上传到指定 Github 仓库位置，再利用 jsDelivr 获得图片加速后的 url。
使用效果：点击访问测试图片
Github 配置首先你先得创建一个 Github 仓库4，并获取一个 token（它可以让程序拥有控制仓库的权限）。

访问 https://github.com/settings/tokens，


拉到最下面，点击 Generate token，生成并复制。

PicGo 配置
在此处下载，Windows 系统就选 .exe 结尾的下；
安装，打开 PicGo，在「图床设置」处配置 Github 图床；

设定仓库名：填入你上面创建的仓库名，格式为：用户名/仓库名；
设定分支名：一般填写 master 就行了5；
设定 Token：将 Github 配置中得到的 Token 粘贴进去；
指定存储路径：你想要把图片放在仓库的哪个位置，比如我是：static_files/iljw/img/large，Github 对应的是：



jsDelivr 配置其实就是上一节 PicGo 配置的最后一条——设定自定义域名。我的设定是：
https://cdn.jsdelivr.net/gh/joeyliu6/Blogger@master

其中67：

gh 表示来自 Github 的仓库
joeyliu6/Blogger 仓库的具体位置
master 仓库的分支

好的，在此就配置完成。图片链接形式如下：
https://cdn.jsdelivr.net/gh/joeyliu6/Blogger@master/static_files/iljw/img/large/20190512151852.png


你可以通过 PicGo 方便地上传图片了，它支持拖拽、点击、剪贴板上传，上传后，图片链接直接复制的你的剪贴板中。
当然，你也可以通过 Git 命令，将本地图片批量上传到 Github 上，再替换成原文中的图片链接地址，以完成图片迁移的工作。
结语整个过程比较简单，创建 Github 仓库，并获取 token，填入 PicGo 配置即可完成。

使用 jsDelivr 加速静态文件访问，能够优化博客体验。
在 Github 存储图片，利于博主对于图片的掌控。
使用 PicGo 的原因是因为能够方便地将上传图片到 Github，并直接获取 jsDelivr 的加速后的图片地址。

]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>jsDelivr</tag>
        <tag>加速github</tag>
        <tag>图床</tag>
      </tags>
  </entry>
  <entry>
    <title>在腾讯云COS部署HEXO博客</title>
    <url>/skill/ab27931c.html</url>
    <content><![CDATA[突然发现，腾讯云COS竟然支持静态网站部署了，那我还放在Github Page干嘛，想办法迁移到国内吧！然后我再Hexo插件库发现了这么一个东西hexo-deployer-cos，有大神写了快速部署插件，说用就用。本文域名将用www.test.com代替。
准备
你需要在本地部署好hexo环境
你需要申请腾讯云COS服务，参照COS文档，你需要获取APPID，SecretId，SecretKey，Bucket，Region这五个参数，具体如下：




名称
描述



APPID
开发者访问 COS 服务时拥有的用户维度唯一资源标识，用以标识资源


SecretId
开发者拥有的项目身份识别 ID，用以身份认证


SecretKey
开发者拥有的项目身份密钥


Bucket
COS 中用于存储数据的容器，本文创建以www为例


Region
域名中的地域信息。枚举值参见 可用地域 文档，如：ap-beijing, ap-hongkong, eu-frankfurt 等



安装好hexo-deployer-cos插件，这个最简单，直接执行npm install hexo-deployer-cos --save命令即可。

配置COS如果你已经在准备步骤中注册了帐号那么请按照下面的步骤继续，首先，点击对象存储控制台，然后点击创建Bucket按钮。

请按照图中设置新建您的Bucket，注意名称仅支持小写字母、数字和 - 的组合，不能超过40字符。 我这里以www为例。
等待系统创建Bucket，创建完成后，点击您的Bucket名称，进入www管理页面。然后我们点击基础配置按钮。下拉到静态网站选项，点击编辑，如下所示。

按照图中设置打开当前状态，Index索引按钮，Http状态码若您网站目录有相关文件请打开，否则保持默认。
然后我们再次点击域名管理页面。下拉到下面的自定义域名，点击**+添加域名**按钮。输入您自定义域名，本文以www.test.com为例，CDN加速默认打开，然后点击保存。

接下来，等待域名状态变为已上线，复制CNAME中的域名，本文则以www.test.cn.cdn.dnsv1.com为例。
然后，我们需要将www.test.cn.cdn.dnsv1.com解析到您的域名，进入腾讯云域名服务控制台，如果你使用的是其他域名服务商，请用其他服务商进行解析。
添加CNAME域名为www.test.cn.cdn.dnsv1.com，主机记录请设置为www。

这样，你的COS基础设置就完成啦。
给你的服务器配置HTTPS（可选）本文是建立在您在腾讯云申请过免费的SSL证书的前提下，如果您没有申请，请跳过本步骤
点击CDN控制台页面，你会看到你在上一步中添加的域名已经自动设置，我们点击相应域名的管理，然后点击高级配置。找到HTTPS配置，然后点击前往配置。

在选择证书页面中的证书列表选择你的证书。其他默认，然后选择提交。

等待部署完成，最近我们再次回到CDN中的高级配置页面，打开**强制跳转HTTPS:**按钮，如图

现在，你的服务器已经通过SSL加密了。
配置hexo部署cos配置我们需要安装hexo-deployer-cos插件，如果你已经在准备中安装了，那么就不用安装了。否则按照下面的命令安装。
npm install hexo-deployer-cos --save

接下面我们配置hexo的配置文件，首先打开根目录的_config.yml配置文件，将原来的deploy替换为下面的内容：
deploy:   type: cos  appId: yourAPPID  secretId: yourSecretId  secretKey: yourSecretKey  bucket: yourBucketName-yourAPPID  region: yourRegion

细心的同学发现我的配置与hexo-deployer-cos的Github项目页面给出的配置不同，为什么呢？坑来了，该插件作者更新了插件，但是没更新Readme文档，用原作者的配置文件会报错。所以请用我给出的配置。那么具体配置如下。
假如说我的APPID是1251234567，secretId是ABCDEFGHIGKLMNOPQRSTUVWXYZ，secretKey是abcdefghijklmnopqrstuvwxyz，创建的bucket是www，region可用地区是成都，也就是ap-chengdu，这个详见准备的表格。
那么我的_config.yml中deploy配置为：
......deploy:   type: cos  appId: 1251234567  secretId: ABCDEFGHIGKLMNOPQRSTUVWXYZ  secretKey: abcdefghijklmnopqrstuvwxyz  bucket: www-1251234567  region: ap-chengdu......

部署Hexo到COS现在你已经完成了最后的设置，最后一步就是需要部署项目到COS了，输入我们熟悉的部署命令：
hexo g -d

你会看到如下输出：

INFO  Start processing
INFO  Generating Baidu urls for last 1 posts
INFO  Posts urls generated in baidu_urls.txt
https://www.techeek.cn/2018/08/14/Ubuntu-DTS-translation/
INFO  Files loaded in 1.24 s
INFO  Generated: sitemap.xml
......
INFO  成功上传:E:\Desktop\临时\git\www.test.com\public\2016\06\05\Workerman-Tcp\index.html
INFO  成功上传:E:\Desktop\临时\git\www.test.com\public\2017\03\09\docker-lnmp-typecho\index.html
INFO  成功上传:E:\Desktop\临时\git\www.test.com\public\2016\09\28\dontstarve-server\index.html
......


好了，现在我们访问你的域名看看是否上传成功了？在浏览器打开https://www.test.com
我们看到项目已经上传，我们在打开COS的Bucket，看看是不是网站真的在Bucket上。

我们看到，服务器在COS运行成功了。
结论这样，我的网站速度访问不知道快到哪里去了，腾讯云的产品就是赞！而且CDN和COS都限流量免费，像我这种小网站，基本用不完，如果你在在搭建hexo博客，何不尝试吧网站搭建在腾讯云的COS上呢？
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
